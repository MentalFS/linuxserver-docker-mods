name: Docker
on: [push, workflow_dispatch]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_AUTHOR: mentalfs
  IMAGE_NAME: linuxserver-mods

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_AUTHOR }}/${{ env.IMAGE_NAME }}
          tags: |
            freshrss-extensions
            freshrss-redditimage

      - name: Build freshrss-extensions and push it to ${{ env.REGISTRY }}
        id: build-and-push-freshrss-extensions
        uses: docker/build-push-action@v5
        with:
          context: ./freshrss-extensions
          file: ./freshrss-extensions/Dockerfile
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_AUTHOR }}/${{ env.IMAGE_NAME }}:freshrss-extensions
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.ref == 'refs/heads/main' }}

      - name: Build freshrss-redditimage and push it to ${{ env.REGISTRY }}
        id: build-and-push-freshrss-redditimage
        uses: docker/build-push-action@v5
        with:
          context: ./freshrss-redditimage
          file: ./freshrss-redditimage/Dockerfile
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_AUTHOR }}/${{ env.IMAGE_NAME }}:freshrss-redditimage
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.ref == 'refs/heads/main' }}

  prune:
    needs: [docker]
    runs-on: ubuntu-latest

    steps:
      - name: Prune old untagged images
        uses: vlaurin/action-ghcr-prune@v0.5.0
        with:
          token: ${{ secrets.PACKAGE_DELETE_TOKEN }}
          user: ${{ env.IMAGE_AUTHOR }}
          container: ${{ env.IMAGE_NAME }}
          dry-run: false
          prune-untagged: true
